const RATE_USD_TO_EUR = 0.95

import { useState, useEffect } from 'react'
import Head from "next/head";
import Image from "next/image";
import Header from "../components/Header";
import {
  Grid,
  Button,
  Typography,
  Divider,
  Box,
  Container,
  Stack,
  TextField,
  Card,
  CardContent,
} from "@mui/material";
// import SearchIcon from "@mui/icons-material/Search";
import SelectCustom from "../components/SelectCustom";
import JetonsTable from "../components/JetonsTable";
import HCarousel from "../components/HCarousel";
import HeadCrumb from "@/components/Header/HeadCrumb";
import tezosLogo from "../assets/images/tezos_gradient.svg";
import searchIcon from "../assets/iconSvg/searchIcon.svg";
import TypingEffect from "../components/others/typingEffect";
import Background from "../components/others/background";
// import ScanIcon from "@/assets/iconSvg/ScanIcon.svg";

import { serverSideTranslations } from "next-i18next/serverSideTranslations";
import { useTranslation } from "next-i18next";
import { useRouter } from "next/router";

import { HomeResponse } from '../endpoints/API';
import HomeEndpoint from '../endpoints/HomeEndpoint';


export async function getServerSideProps({ locale }: any) {
  const homeResponse = await HomeEndpoint()

  return {
    props: {
      ...(await serverSideTranslations(locale, ["common"])),
      homeResponse,
      iniSeconds: ((new Date()) - (new Date(homeResponse.stats.lastBlockDate)))
    },
  };
}

const h1WordsAnim = ["transaction^1000", "wallet^1000", "nft^1000"];
export default function Home({ homeResponse, iniSeconds }) {
  const { t } = useTranslation("common");
  const router = useRouter();
  const {locale} = router
  const [seconds, setSeconds] = useState(iniSeconds)
  useEffect(() => {
    let i = setInterval(() => setSeconds(seconds => seconds + 1), 1000)
    return () => clearInterval(i)
  }, [])


  function formatEthPrice(ethPrice) {
    return new Intl.NumberFormat(locale, { style: 'currency', currency: locale === 'en' ? 'USD' : 'EUR' })
      .format(locale === 'en' ? ethPrice : ethPrice * RATE_USD_TO_EUR)
  }

  return (
    <>
      <Head>
        <title>BetterScan</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <HeadCrumb />
        <Header />
        <Box className="searchBlock">
          <Container maxWidth="xl">
            <Typography
              variant="h5"
              align="center"
              color="text.secondary"
              paragraph
            >
              {t("title")} <TypingEffect strings={h1WordsAnim} />{" "}<br />
              {t("title2")}
            </Typography>
            <Box className="searchBlock-form">
              <TextField
                hiddenLabel
                id="filled-hidden-label-small"
                defaultValue=""
                placeholder={t("topPlaceholder")}
                fullWidth
                sx={{ ml: 0 }}
              ></TextField>
              <span className="scanIcon">{/* <ScanIcon /> */}</span>
              <Button
                variant="contained"
                className="mainSearchButton"
              >
                <Image src={searchIcon} width={40} alt="Research icon" style={{zIndex: "1"}} />
              </Button>
            </Box>
          </Container>
        </Box>
        <Box className="cardsModule">
          <Container maxWidth="xl">
            <Grid
              container
              rowSpacing={2}
              columnSpacing={{ xs: 1, sm: 2, md: 3 }}
            >
              <Grid item xs={12} sm={12} md={4}>
                <Box className="cardBox cardBox--info">
                  <Box className="cardBox-inner">
                    <Box className="cardBox-data">
                      <Box className="cardBox-head">
                        <Typography
                          gutterBottom
                          variant="h5"
                          className="cardBox-title"
                        >
                          {t("block1")}
                          <b>XTZ</b>
                        </Typography>
                      </Box>
                      <Typography variant="h4" className="cardBox-price">
                        <span className="gradientText">{ formatEthPrice(homeResponse.stats.ethPrice) }</span>
                      </Typography>
                    </Box>
                    <Image
                      priority
                      src={tezosLogo}
                      width={100}
                      alt="Follow us on Twitter"
                    />
                  </Box>
                </Box>
              </Grid>
              <Grid item xs={12} sm={12} md={4}>
                <Box className="cardBox">
                  <Box className="cardBox-inner">
                    <Box className="cardBox-head">
                      <Typography
                        gutterBottom
                        variant="h5"
                        className="cardBox-title"
                      >
                        {t("block2")}
                      </Typography>
                    </Box>
                    <Typography variant="h4" className="cardBox-price">
                      <span className="gradientText">{formatEthPrice(homeResponse.stats.normalFee)} $</span>
                      <span className="cardBox-status">({homeResponse.stats.normalFee} XTZ)</span>
                    </Typography>
                  </Box>
                </Box>
              </Grid>
              <Grid item xs={12} sm={12} md={4}>
                <Box className="cardBox">
                  <Box className="cardBox-inner">
                    <Box className="cardBox-head">
                      <Typography
                        gutterBottom
                        variant="h5"
                        className="cardBox-title"
                      >
                        {t("block3")}
                      </Typography>
                      {/*<span className="cardBox-status">{homeResponse.stats.lastBlockDate}</span>*/}
                    </Box>
                    <Typography variant="h4" className="cardBox-price">
                      <span className="gradientText">il y a {seconds % 15} seconds</span>
                    </Typography>
                  </Box>
                </Box>
              </Grid>
            </Grid>
          </Container>
        </Box>
        <Box className="sliderBlock">
          <Container maxWidth="xl">
            <Box className="sectionHead">
              <Box className="sectionHead-title">Collection NFT</Box>
              <SelectCustom />
            </Box>
            <HCarousel trending={homeResponse.collections.trending} />
          </Container>
        </Box>
        <Box className="listTableBlock">
          <Container maxWidth="xl">
            <Box className="sectionHead">
              <Box className="sectionHead-title">Jetons</Box>
              <SelectCustom />
            </Box>
            <JetonsTable />
          </Container>
        </Box>
      </main>
    </>
  );
}
